/ * Program Description
STC12LE5A60S2 3.3V1T microcontroller hardware SPI LCD Direct Drive Pegasus TM022HDH26
SCM frequency 11.0592MHZ, measured the frequency of about one second brushing once fullscreen
STC12C5A60S2 5V1T microcontroller structure consistency , according to the PDF Driver 3.3V devices
This procedure has been tested available.
Taobao name : pei_gang 2013/2/5
* /

# include <stc12.h> / / STC12 MCU header file

/ / Color definition
# define Blue 0x001f
# define Yellow 0xffe0
# define Green 0x07e0
# define Black 0x0000
# define White 0xffff
# define Red 0xf800

/ / Pin Definitions
sbit R_ESET = P1 ^ 2; / / LCD RESET pin , then the microcontroller IO pin
sbit C_D = P1 ^ 3 ;/ / LCD D / CX pin data / command control , connected microcontroller IO pin
sbit C_S = P1 ^ 4 ;/ / LCD chip select CS, P1.4 for the SS pin microcontroller SPI bus through the MSTR bit is configured for IO mode

/ / The following three pin connection . Because then the default hardware SPI microcontroller pin , only need to be able to SPCTL manipulation without defined procedures
/ / sbit SDI = P1 ^ 5; LCD SDI pin , the host writes the LCD , then the MCU MOSI pin P1.5
/ / sbit SDO = P1 ^ 6; LCD SDO pin , read data from the LCD , then the microcontroller MISO pin P1.6
/ / sbit SCL = P1 ^ 7; LCD SCL clock pin , then the MCU clock pin P1.7 SCLK

/ / LED anode ( 10 feet ) then the power 3.3V ,11-14 for the four LED cathode pin microcontroller IO pin , set to 0 that is lit
/ / 3.3V per LED through a current of about 20 mA , without limiting resistor
sbit LED1 = P2 ^ 4 ;/ / backlight LED control .
sbit LED2 = P2 ^ 5 ;/ / backlight LED control
sbit LED3 = P2 ^ 6 ;/ / backlight LED control
sbit LED4 = P2 ^ 7 ;/ / backlight LED control

/ * SPCTL parameter 11010000 = 0xd0 The parameters microcontroller hardware SPI master mode , P1.4 for the IO mode , SPI clock frequency of the MCU clock frequency / 4 , as 2.7648M
Bit7 SSIG SS pin ignored Control bit 1
Bit6 SPEN SPI Enable bit 1
Bit5 DORD highest priority data transmitted sequentially 0
Bit4 MSTR Master / Slave Mode Select bit 1
Bit3 SPOL Clock Polarity 0
Bit2 SPHA clock phase 0
Bit1 SPR1 Clock Rate Select 0
Bit0 SPR0 Clock Rate Select 0
* /

/ / Function
void Delay_us (int value) / / / / delay function _us
{
while (value)
value -;
}

void Delay_ms (int value) / / / / delay function _ms
{
while (value) {
Delay_us (999);
value -;
}
}

void HD_reset () {
/ / SPI initialization
SPDAT = 0;
SPCTL = 0xd0; / / Set 1101,0000
SPSTAT = 0xc0; / / flag cleared by writing 1
/ / LCD Reset
R_ESET = 1;
Delay_ms (1);
R_ESET = 0;
Delay_ms (10);
R_ESET = 1;
Delay_ms (120);
}

void LCD_Writ_Bus (char a) {/ / write data function 8
??????C_S = 0;
??????SPDAT = a ;/ / start transmission
while (! (SPSTAT & 0x80)); / / wait for SPIF = 1, the transfer is complete
SPSTAT = 0xc0;
??????C_S = 1;
}

void LCD_WRITE_CMD (char cmd) {/ / 8 bit
??????C_D = 0;
??????LCD_Writ_Bus (cmd);
}

void LCD_WRITE_COM_DATA (char com_data) {/ / 8 bit
??????C_D = 1;
??????LCD_Writ_Bus (com_data);
}

void LCD_WRITE_DATA (int a) {/ / 16 -bit data , twice , each time to send 8
??????C_D = 1;
??????LCD_Writ_Bus (a >> 8);
LCD_Writ_Bus (a);
}

/ / Set the plotting window , x = 0 ~ 239, y = 0 ~ 319
void Address_set (unsigned int x1, unsigned int x2, unsigned int y1, unsigned int y2)
{
?????LCD_WRITE_CMD (0x2a); / / x -axis
?????LCD_WRITE_DATA (x1);
?????LCD_WRITE_DATA (x2);
LCD_WRITE_CMD (0x2b); / / y -axis
LCD_WRITE_DATA (y1);
?????LCD_WRITE_DATA (y2);
?????LCD_WRITE_CMD (0x2c);
}

void LCD_TEST_SingleColor (int Discolor) {
?????int i, j;
Address_set (0,239,0,319);

for (i = 0; i <320; i + +) {
for (j = 0; j <240; j + +) {
LCD_WRITE_DATA (Discolor);
}
}
}

/ / Draw a horizontal line
void LCD_draw_Line (unsigned int y, unsigned int color)
{Int i;
Address_set (0,239, y, y);
for (i = 0; i <240; i + +) {
LCD_WRITE_DATA (color);
}
}

/ / Initialize LCD Master
void Initial_ILI9340C (void)
{
????????LCD_WRITE_CMD (0xCB);
????????LCD_WRITE_COM_DATA (0x39);
????????LCD_WRITE_COM_DATA (0x2C);
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0x34);
????????LCD_WRITE_COM_DATA (0x02);

????????LCD_WRITE_CMD (0xCF);
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0XC1);
????????LCD_WRITE_COM_DATA (0X30);
?
????????LCD_WRITE_CMD (0xE8);
????????LCD_WRITE_COM_DATA (0x85);
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0x78);
?
????????LCD_WRITE_CMD (0xEA);
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0x00);
?
????????LCD_WRITE_CMD (0xED);
????????LCD_WRITE_COM_DATA (0x64);
????????LCD_WRITE_COM_DATA (0x03);
????????LCD_WRITE_COM_DATA (0X12);
????????LCD_WRITE_COM_DATA (0X81);

????????LCD_WRITE_CMD (0xF7);
????????LCD_WRITE_COM_DATA (0x20);
??
????????LCD_WRITE_CMD (0xC0); / / Power control
????????LCD_WRITE_COM_DATA (0x23); / / VRH [5:0]
?
????????LCD_WRITE_CMD (0xC1); / / Power control
????????LCD_WRITE_COM_DATA (0x10); / / SAP [2:0]; BT [3:0]
?
????????LCD_WRITE_CMD (0xC5); / / VCM control
????????LCD_WRITE_COM_DATA (0x3e); / / contrast adjustment
????????LCD_WRITE_COM_DATA (0x28);
?
????????LCD_WRITE_CMD (0xC7); / / VCM control2
????????LCD_WRITE_COM_DATA (0x86); / / -
?
????????LCD_WRITE_CMD (0x36); / / Memory Access Control
????????LCD_WRITE_COM_DATA (0xC8);

????????LCD_WRITE_CMD (0x3A);
????????LCD_WRITE_COM_DATA (0x55);

????????LCD_WRITE_CMD (0xB1);
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0x18);
?
????????LCD_WRITE_CMD (0xB6); / / Display Function Control
????????LCD_WRITE_COM_DATA (0x08);
????????LCD_WRITE_COM_DATA (0x82);
????????LCD_WRITE_COM_DATA (0x27);
?
????????LCD_WRITE_CMD (0xF2); / / 3Gamma Function Disable
????????LCD_WRITE_COM_DATA (0x00);
?
????????LCD_WRITE_CMD (0x26); / / Gamma curve selected
????????LCD_WRITE_COM_DATA (0x01);
?
????????LCD_WRITE_CMD (0xE0); / / Set Gamma
????????LCD_WRITE_COM_DATA (0x0F);
????????LCD_WRITE_COM_DATA (0x31);
????????LCD_WRITE_COM_DATA (0x2B);
????????LCD_WRITE_COM_DATA (0x0C);
????????LCD_WRITE_COM_DATA (0x0E);
????????LCD_WRITE_COM_DATA (0x08);
????????LCD_WRITE_COM_DATA (0x4E);
????????LCD_WRITE_COM_DATA (0xF1);
????????LCD_WRITE_COM_DATA (0x37);
????????LCD_WRITE_COM_DATA (0x07);
????????LCD_WRITE_COM_DATA (0x10);
????????LCD_WRITE_COM_DATA (0x03);
????????LCD_WRITE_COM_DATA (0x0E);
????????LCD_WRITE_COM_DATA (0x09);
????????LCD_WRITE_COM_DATA (0x00);

????????LCD_WRITE_CMD (0XE1); / / Set Gamma
????????LCD_WRITE_COM_DATA (0x00);
????????LCD_WRITE_COM_DATA (0x0E);
????????LCD_WRITE_COM_DATA (0x14);
????????LCD_WRITE_COM_DATA (0x03);
????????LCD_WRITE_COM_DATA (0x11);
????????LCD_WRITE_COM_DATA (0x07);
????????LCD_WRITE_COM_DATA (0x31);
????????LCD_WRITE_COM_DATA (0xC1);
????????LCD_WRITE_COM_DATA (0x48);
????????LCD_WRITE_COM_DATA (0x08);
????????LCD_WRITE_COM_DATA (0x0F);
????????LCD_WRITE_COM_DATA (0x0C);
????????LCD_WRITE_COM_DATA (0x31);
????????LCD_WRITE_COM_DATA (0x36);
????????LCD_WRITE_COM_DATA (0x0F);
?
????????LCD_WRITE_CMD (0x11); / / Exit Sleep
????????Delay_ms (120);

????????LCD_WRITE_CMD (0x29); / / Display on
????????LCD_WRITE_CMD (0x2c);

}

/ / LCD into hibernation
void LCD_Sleep_ILI9340C (void)
{
??LCD_WRITE_CMD (0x28) ;/ / Display off
??Delay_ms (20);
??LCD_WRITE_CMD (0x10) ;/ / Enter Sleep mode
}
/ / LCD out of hibernation
void LCD_ExitSleep_ILI9340C (void)
{
??LCD_WRITE_CMD (0x11) ;/ / Exit Sleep
??Delay_ms (120);
??LCD_WRITE_CMD (0x29) ;/ / Display on
??LCD_WRITE_CMD (0x2c);
}

void main ()
{
/ / Turn on the backlight
LED1 = 0;
LED2 = 0;
LED3 = 0;
LED4 = 0;
/ / Hardware initialization
HD_reset ();
????????Delay_ms (50) ;/ / delay 50ms
Initial_ILI9340C ();
Delay_ms (300);
/ / Test to enter / exit sleep
LCD_Sleep_ILI9340C ();
Delay_ms (300);
LCD_ExitSleep_ILI9340C ();
/ / Display a black screen
LCD_TEST_SingleColor (Black);
Delay_ms (500);
while (1) {
/ / Loop 6 colors full screen
LCD_TEST_SingleColor (Red);
LCD_TEST_SingleColor (Green);
LCD_TEST_SingleColor (Blue);
LCD_TEST_SingleColor (Yellow);
LCD_TEST_SingleColor (White);
LCD_TEST_SingleColor (Black);
/ / y -axis height 100 , draw a red horizontal line
LCD_draw_Line (100, Red);
Delay_ms (1000);
}
}